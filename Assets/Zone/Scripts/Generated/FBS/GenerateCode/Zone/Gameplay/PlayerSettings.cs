// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Zone.Gameplay
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PlayerSettings : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static PlayerSettings GetRootAsPlayerSettings(ByteBuffer _bb) { return GetRootAsPlayerSettings(_bb, new PlayerSettings()); }
  public static PlayerSettings GetRootAsPlayerSettings(ByteBuffer _bb, PlayerSettings obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Speed { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Zone.Gameplay.PlayerSettings> CreatePlayerSettings(FlatBufferBuilder builder,
      float speed = 0.0f) {
    builder.StartTable(1);
    PlayerSettings.AddSpeed(builder, speed);
    return PlayerSettings.EndPlayerSettings(builder);
  }

  public static void StartPlayerSettings(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddSpeed(FlatBufferBuilder builder, float speed) { builder.AddFloat(0, speed, 0.0f); }
  public static Offset<Zone.Gameplay.PlayerSettings> EndPlayerSettings(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Zone.Gameplay.PlayerSettings>(o);
  }
  public PlayerSettingsT UnPack() {
    var _o = new PlayerSettingsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlayerSettingsT _o) {
    _o.Speed = this.Speed;
  }
  public static Offset<Zone.Gameplay.PlayerSettings> Pack(FlatBufferBuilder builder, PlayerSettingsT _o) {
    if (_o == null) return default(Offset<Zone.Gameplay.PlayerSettings>);
    return CreatePlayerSettings(
      builder,
      _o.Speed);
  }
}

public class PlayerSettingsT
{
  public float Speed { get; set; }

  public PlayerSettingsT() {
    this.Speed = 0.0f;
  }
}


static public class PlayerSettingsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Speed*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
